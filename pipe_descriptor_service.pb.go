// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipe_descriptor_service.proto

package gapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetPipeDescriptorReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPipeDescriptorReq) Reset()         { *m = GetPipeDescriptorReq{} }
func (m *GetPipeDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*GetPipeDescriptorReq) ProtoMessage()    {}
func (*GetPipeDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{0}
}

func (m *GetPipeDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPipeDescriptorReq.Unmarshal(m, b)
}
func (m *GetPipeDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPipeDescriptorReq.Marshal(b, m, deterministic)
}
func (m *GetPipeDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipeDescriptorReq.Merge(m, src)
}
func (m *GetPipeDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_GetPipeDescriptorReq.Size(m)
}
func (m *GetPipeDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipeDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipeDescriptorReq proto.InternalMessageInfo

func (m *GetPipeDescriptorReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AddPipeDescriptorReq struct {
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	PluginId             string                 `protobuf:"bytes,3,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	Params               []*PipeDescriptorParam `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty"`
	Inputs               []string               `protobuf:"bytes,6,rep,name=inputs,proto3" json:"inputs,omitempty"`
	InputsExp            string                 `protobuf:"bytes,9,opt,name=inputs_exp,json=inputsExp,proto3" json:"inputs_exp,omitempty"`
	Outputs              []string               `protobuf:"bytes,7,rep,name=outputs,proto3" json:"outputs,omitempty"`
	OutputsExp           string                 `protobuf:"bytes,10,opt,name=outputs_exp,json=outputsExp,proto3" json:"outputs_exp,omitempty"`
	NeedInit             bool                   `protobuf:"varint,8,opt,name=need_init,json=needInit,proto3" json:"need_init,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AddPipeDescriptorReq) Reset()         { *m = AddPipeDescriptorReq{} }
func (m *AddPipeDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*AddPipeDescriptorReq) ProtoMessage()    {}
func (*AddPipeDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{1}
}

func (m *AddPipeDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPipeDescriptorReq.Unmarshal(m, b)
}
func (m *AddPipeDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPipeDescriptorReq.Marshal(b, m, deterministic)
}
func (m *AddPipeDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPipeDescriptorReq.Merge(m, src)
}
func (m *AddPipeDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_AddPipeDescriptorReq.Size(m)
}
func (m *AddPipeDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPipeDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddPipeDescriptorReq proto.InternalMessageInfo

func (m *AddPipeDescriptorReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddPipeDescriptorReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddPipeDescriptorReq) GetPluginId() string {
	if m != nil {
		return m.PluginId
	}
	return ""
}

func (m *AddPipeDescriptorReq) GetParams() []*PipeDescriptorParam {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *AddPipeDescriptorReq) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *AddPipeDescriptorReq) GetInputsExp() string {
	if m != nil {
		return m.InputsExp
	}
	return ""
}

func (m *AddPipeDescriptorReq) GetOutputs() []string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *AddPipeDescriptorReq) GetOutputsExp() string {
	if m != nil {
		return m.OutputsExp
	}
	return ""
}

func (m *AddPipeDescriptorReq) GetNeedInit() bool {
	if m != nil {
		return m.NeedInit
	}
	return false
}

type AddPipeDescriptorRes struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPipeDescriptorRes) Reset()         { *m = AddPipeDescriptorRes{} }
func (m *AddPipeDescriptorRes) String() string { return proto.CompactTextString(m) }
func (*AddPipeDescriptorRes) ProtoMessage()    {}
func (*AddPipeDescriptorRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{2}
}

func (m *AddPipeDescriptorRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPipeDescriptorRes.Unmarshal(m, b)
}
func (m *AddPipeDescriptorRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPipeDescriptorRes.Marshal(b, m, deterministic)
}
func (m *AddPipeDescriptorRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPipeDescriptorRes.Merge(m, src)
}
func (m *AddPipeDescriptorRes) XXX_Size() int {
	return xxx_messageInfo_AddPipeDescriptorRes.Size(m)
}
func (m *AddPipeDescriptorRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPipeDescriptorRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddPipeDescriptorRes proto.InternalMessageInfo

func (m *AddPipeDescriptorRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddPipeDescriptorRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdatePipeDescriptorReq struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PluginId             string                 `protobuf:"bytes,3,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	Description          string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Params               []*PipeDescriptorParam `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty"`
	Inputs               []string               `protobuf:"bytes,6,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []string               `protobuf:"bytes,7,rep,name=outputs,proto3" json:"outputs,omitempty"`
	NeedInit             bool                   `protobuf:"varint,8,opt,name=need_init,json=needInit,proto3" json:"need_init,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdatePipeDescriptorReq) Reset()         { *m = UpdatePipeDescriptorReq{} }
func (m *UpdatePipeDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePipeDescriptorReq) ProtoMessage()    {}
func (*UpdatePipeDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{3}
}

func (m *UpdatePipeDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePipeDescriptorReq.Unmarshal(m, b)
}
func (m *UpdatePipeDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePipeDescriptorReq.Marshal(b, m, deterministic)
}
func (m *UpdatePipeDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePipeDescriptorReq.Merge(m, src)
}
func (m *UpdatePipeDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_UpdatePipeDescriptorReq.Size(m)
}
func (m *UpdatePipeDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePipeDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePipeDescriptorReq proto.InternalMessageInfo

func (m *UpdatePipeDescriptorReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdatePipeDescriptorReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePipeDescriptorReq) GetPluginId() string {
	if m != nil {
		return m.PluginId
	}
	return ""
}

func (m *UpdatePipeDescriptorReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdatePipeDescriptorReq) GetParams() []*PipeDescriptorParam {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *UpdatePipeDescriptorReq) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *UpdatePipeDescriptorReq) GetOutputs() []string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *UpdatePipeDescriptorReq) GetNeedInit() bool {
	if m != nil {
		return m.NeedInit
	}
	return false
}

type UpdatePipeDescriptorRes struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePipeDescriptorRes) Reset()         { *m = UpdatePipeDescriptorRes{} }
func (m *UpdatePipeDescriptorRes) String() string { return proto.CompactTextString(m) }
func (*UpdatePipeDescriptorRes) ProtoMessage()    {}
func (*UpdatePipeDescriptorRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{4}
}

func (m *UpdatePipeDescriptorRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePipeDescriptorRes.Unmarshal(m, b)
}
func (m *UpdatePipeDescriptorRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePipeDescriptorRes.Marshal(b, m, deterministic)
}
func (m *UpdatePipeDescriptorRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePipeDescriptorRes.Merge(m, src)
}
func (m *UpdatePipeDescriptorRes) XXX_Size() int {
	return xxx_messageInfo_UpdatePipeDescriptorRes.Size(m)
}
func (m *UpdatePipeDescriptorRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePipeDescriptorRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePipeDescriptorRes proto.InternalMessageInfo

func (m *UpdatePipeDescriptorRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type RemovePipeDescriptorReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePipeDescriptorReq) Reset()         { *m = RemovePipeDescriptorReq{} }
func (m *RemovePipeDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*RemovePipeDescriptorReq) ProtoMessage()    {}
func (*RemovePipeDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{5}
}

func (m *RemovePipeDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePipeDescriptorReq.Unmarshal(m, b)
}
func (m *RemovePipeDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePipeDescriptorReq.Marshal(b, m, deterministic)
}
func (m *RemovePipeDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePipeDescriptorReq.Merge(m, src)
}
func (m *RemovePipeDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_RemovePipeDescriptorReq.Size(m)
}
func (m *RemovePipeDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePipeDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePipeDescriptorReq proto.InternalMessageInfo

func (m *RemovePipeDescriptorReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RemovePipeDescriptorRes struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePipeDescriptorRes) Reset()         { *m = RemovePipeDescriptorRes{} }
func (m *RemovePipeDescriptorRes) String() string { return proto.CompactTextString(m) }
func (*RemovePipeDescriptorRes) ProtoMessage()    {}
func (*RemovePipeDescriptorRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{6}
}

func (m *RemovePipeDescriptorRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePipeDescriptorRes.Unmarshal(m, b)
}
func (m *RemovePipeDescriptorRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePipeDescriptorRes.Marshal(b, m, deterministic)
}
func (m *RemovePipeDescriptorRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePipeDescriptorRes.Merge(m, src)
}
func (m *RemovePipeDescriptorRes) XXX_Size() int {
	return xxx_messageInfo_RemovePipeDescriptorRes.Size(m)
}
func (m *RemovePipeDescriptorRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePipeDescriptorRes.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePipeDescriptorRes proto.InternalMessageInfo

func (m *RemovePipeDescriptorRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ListPipeDescriptorsReq struct {
	Filter               *ListPipeDescriptorsReq_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Sort                 *ListPipeDescriptorsReq_Sort   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Page                 *Page                          `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ListPipeDescriptorsReq) Reset()         { *m = ListPipeDescriptorsReq{} }
func (m *ListPipeDescriptorsReq) String() string { return proto.CompactTextString(m) }
func (*ListPipeDescriptorsReq) ProtoMessage()    {}
func (*ListPipeDescriptorsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{7}
}

func (m *ListPipeDescriptorsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipeDescriptorsReq.Unmarshal(m, b)
}
func (m *ListPipeDescriptorsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipeDescriptorsReq.Marshal(b, m, deterministic)
}
func (m *ListPipeDescriptorsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipeDescriptorsReq.Merge(m, src)
}
func (m *ListPipeDescriptorsReq) XXX_Size() int {
	return xxx_messageInfo_ListPipeDescriptorsReq.Size(m)
}
func (m *ListPipeDescriptorsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipeDescriptorsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipeDescriptorsReq proto.InternalMessageInfo

func (m *ListPipeDescriptorsReq) GetFilter() *ListPipeDescriptorsReq_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListPipeDescriptorsReq) GetSort() *ListPipeDescriptorsReq_Sort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *ListPipeDescriptorsReq) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type ListPipeDescriptorsReq_Filter struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PluginId             string   `protobuf:"bytes,2,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPipeDescriptorsReq_Filter) Reset()         { *m = ListPipeDescriptorsReq_Filter{} }
func (m *ListPipeDescriptorsReq_Filter) String() string { return proto.CompactTextString(m) }
func (*ListPipeDescriptorsReq_Filter) ProtoMessage()    {}
func (*ListPipeDescriptorsReq_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{7, 0}
}

func (m *ListPipeDescriptorsReq_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipeDescriptorsReq_Filter.Unmarshal(m, b)
}
func (m *ListPipeDescriptorsReq_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipeDescriptorsReq_Filter.Marshal(b, m, deterministic)
}
func (m *ListPipeDescriptorsReq_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipeDescriptorsReq_Filter.Merge(m, src)
}
func (m *ListPipeDescriptorsReq_Filter) XXX_Size() int {
	return xxx_messageInfo_ListPipeDescriptorsReq_Filter.Size(m)
}
func (m *ListPipeDescriptorsReq_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipeDescriptorsReq_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipeDescriptorsReq_Filter proto.InternalMessageInfo

func (m *ListPipeDescriptorsReq_Filter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListPipeDescriptorsReq_Filter) GetPluginId() string {
	if m != nil {
		return m.PluginId
	}
	return ""
}

type ListPipeDescriptorsReq_Sort struct {
	Name                 SortDirection `protobuf:"varint,2,opt,name=name,proto3,enum=schema.SortDirection" json:"name,omitempty"`
	CreatedAt            SortDirection `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3,enum=schema.SortDirection" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListPipeDescriptorsReq_Sort) Reset()         { *m = ListPipeDescriptorsReq_Sort{} }
func (m *ListPipeDescriptorsReq_Sort) String() string { return proto.CompactTextString(m) }
func (*ListPipeDescriptorsReq_Sort) ProtoMessage()    {}
func (*ListPipeDescriptorsReq_Sort) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{7, 1}
}

func (m *ListPipeDescriptorsReq_Sort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipeDescriptorsReq_Sort.Unmarshal(m, b)
}
func (m *ListPipeDescriptorsReq_Sort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipeDescriptorsReq_Sort.Marshal(b, m, deterministic)
}
func (m *ListPipeDescriptorsReq_Sort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipeDescriptorsReq_Sort.Merge(m, src)
}
func (m *ListPipeDescriptorsReq_Sort) XXX_Size() int {
	return xxx_messageInfo_ListPipeDescriptorsReq_Sort.Size(m)
}
func (m *ListPipeDescriptorsReq_Sort) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipeDescriptorsReq_Sort.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipeDescriptorsReq_Sort proto.InternalMessageInfo

func (m *ListPipeDescriptorsReq_Sort) GetName() SortDirection {
	if m != nil {
		return m.Name
	}
	return SortDirection_NO_SORT
}

func (m *ListPipeDescriptorsReq_Sort) GetCreatedAt() SortDirection {
	if m != nil {
		return m.CreatedAt
	}
	return SortDirection_NO_SORT
}

type ListPipeDescriptorsRes struct {
	PipeDescriptors      []*PipeDescriptor `protobuf:"bytes,1,rep,name=pipe_descriptors,json=pipeDescriptors,proto3" json:"pipe_descriptors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListPipeDescriptorsRes) Reset()         { *m = ListPipeDescriptorsRes{} }
func (m *ListPipeDescriptorsRes) String() string { return proto.CompactTextString(m) }
func (*ListPipeDescriptorsRes) ProtoMessage()    {}
func (*ListPipeDescriptorsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e05aebd4f68dcc5, []int{8}
}

func (m *ListPipeDescriptorsRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipeDescriptorsRes.Unmarshal(m, b)
}
func (m *ListPipeDescriptorsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipeDescriptorsRes.Marshal(b, m, deterministic)
}
func (m *ListPipeDescriptorsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipeDescriptorsRes.Merge(m, src)
}
func (m *ListPipeDescriptorsRes) XXX_Size() int {
	return xxx_messageInfo_ListPipeDescriptorsRes.Size(m)
}
func (m *ListPipeDescriptorsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipeDescriptorsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipeDescriptorsRes proto.InternalMessageInfo

func (m *ListPipeDescriptorsRes) GetPipeDescriptors() []*PipeDescriptor {
	if m != nil {
		return m.PipeDescriptors
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPipeDescriptorReq)(nil), "schema.GetPipeDescriptorReq")
	proto.RegisterType((*AddPipeDescriptorReq)(nil), "schema.AddPipeDescriptorReq")
	proto.RegisterType((*AddPipeDescriptorRes)(nil), "schema.AddPipeDescriptorRes")
	proto.RegisterType((*UpdatePipeDescriptorReq)(nil), "schema.UpdatePipeDescriptorReq")
	proto.RegisterType((*UpdatePipeDescriptorRes)(nil), "schema.UpdatePipeDescriptorRes")
	proto.RegisterType((*RemovePipeDescriptorReq)(nil), "schema.RemovePipeDescriptorReq")
	proto.RegisterType((*RemovePipeDescriptorRes)(nil), "schema.RemovePipeDescriptorRes")
	proto.RegisterType((*ListPipeDescriptorsReq)(nil), "schema.ListPipeDescriptorsReq")
	proto.RegisterType((*ListPipeDescriptorsReq_Filter)(nil), "schema.ListPipeDescriptorsReq.Filter")
	proto.RegisterType((*ListPipeDescriptorsReq_Sort)(nil), "schema.ListPipeDescriptorsReq.Sort")
	proto.RegisterType((*ListPipeDescriptorsRes)(nil), "schema.ListPipeDescriptorsRes")
}

func init() { proto.RegisterFile("pipe_descriptor_service.proto", fileDescriptor_1e05aebd4f68dcc5) }

var fileDescriptor_1e05aebd4f68dcc5 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0x1c, 0xd7, 0x8d, 0x27, 0x50, 0xe8, 0xd2, 0x96, 0x95, 0x43, 0xa9, 0x15, 0x04, 0x4a,
	0x2f, 0x39, 0xa4, 0x08, 0xc4, 0x81, 0x43, 0x50, 0x01, 0x45, 0x42, 0xa2, 0xda, 0xaa, 0x12, 0x82,
	0x83, 0x65, 0xe2, 0x21, 0x5d, 0x35, 0xb1, 0x97, 0xdd, 0x4d, 0xd5, 0x23, 0x3f, 0xc4, 0x2f, 0xf0,
	0x19, 0x7c, 0x0f, 0xf2, 0xda, 0x4e, 0x9b, 0xc4, 0x8e, 0x2f, 0xdc, 0x76, 0x67, 0xde, 0x9b, 0x91,
	0xdf, 0xbc, 0x1d, 0xc3, 0xa1, 0xe0, 0x02, 0x83, 0x08, 0xd5, 0x58, 0x72, 0xa1, 0x13, 0x19, 0x28,
	0x94, 0xd7, 0x7c, 0x8c, 0x7d, 0x21, 0x13, 0x9d, 0x10, 0x47, 0x8d, 0x2f, 0x71, 0x16, 0x7a, 0xfb,
	0x2b, 0xb0, 0x2c, 0xed, 0xdd, 0xbf, 0xc4, 0xa9, 0x40, 0xa9, 0xb2, 0x6b, 0xf7, 0x05, 0xec, 0x7d,
	0x44, 0x7d, 0xc6, 0x05, 0x9e, 0x2e, 0x90, 0x0c, 0x7f, 0x92, 0x1d, 0xb0, 0x78, 0x44, 0x1b, 0x7e,
	0xa3, 0xe7, 0x32, 0x8b, 0x47, 0xdd, 0xdf, 0x16, 0xec, 0x0d, 0xa3, 0x68, 0x1d, 0x48, 0xc0, 0x8e,
	0xc3, 0x19, 0x52, 0xcb, 0x40, 0xcd, 0x99, 0xf8, 0xd0, 0x2e, 0xfa, 0xf2, 0x24, 0xa6, 0xb6, 0x49,
	0xdd, 0x0d, 0x91, 0x0e, 0xb8, 0x62, 0x3a, 0x9f, 0xf0, 0x38, 0xe0, 0x11, 0x6d, 0x9a, 0x7c, 0x2b,
	0x0b, 0x8c, 0x22, 0x72, 0x02, 0x8e, 0x08, 0x65, 0x38, 0x53, 0x74, 0xcb, 0x6f, 0xf6, 0xda, 0x83,
	0x4e, 0x3f, 0xfb, 0xa4, 0xfe, 0x72, 0xf7, 0xb3, 0x14, 0xc3, 0x72, 0x28, 0x39, 0x00, 0x87, 0xc7,
	0x62, 0xae, 0x15, 0x75, 0xfc, 0x66, 0xcf, 0x65, 0xf9, 0x8d, 0x1c, 0x02, 0x64, 0xa7, 0x00, 0x6f,
	0x04, 0x75, 0x4d, 0x2b, 0x37, 0x8b, 0xbc, 0xbf, 0x11, 0x84, 0xc2, 0x76, 0x32, 0xd7, 0x86, 0xb7,
	0x6d, 0x78, 0xc5, 0x95, 0x1c, 0x41, 0x3b, 0x3f, 0x1a, 0x26, 0x18, 0x26, 0xe4, 0xa1, 0x94, 0xda,
	0x01, 0x37, 0x46, 0x8c, 0x02, 0x1e, 0x73, 0x4d, 0x5b, 0x7e, 0xa3, 0xd7, 0x62, 0xad, 0x34, 0x30,
	0x8a, 0xb9, 0xee, 0xbe, 0x2a, 0x95, 0x4b, 0xa5, 0xba, 0x26, 0x57, 0x46, 0xd7, 0x16, 0xb3, 0x92,
	0xab, 0x5c, 0x67, 0x6b, 0xa1, 0xf3, 0x2f, 0x0b, 0x1e, 0x5f, 0x88, 0x28, 0xd4, 0x58, 0x3b, 0x93,
	0x52, 0xe9, 0x37, 0x0a, 0x5b, 0x3f, 0x97, 0xff, 0x2a, 0x7d, 0xb5, 0xb6, 0x1b, 0xa5, 0x3b, 0xae,
	0x52, 0x60, 0x4d, 0xbd, 0x14, 0xca, 0x70, 0x96, 0x5c, 0xd7, 0x8b, 0x55, 0x0d, 0x5d, 0xaf, 0xfa,
	0xd7, 0x82, 0x83, 0x4f, 0x5c, 0xad, 0xbc, 0x0a, 0x95, 0x56, 0x7d, 0x0b, 0xce, 0x0f, 0x3e, 0xd5,
	0x28, 0x0d, 0xbc, 0x3d, 0x78, 0x5e, 0xe8, 0x53, 0x8e, 0xef, 0x7f, 0x30, 0x60, 0x96, 0x93, 0xc8,
	0x6b, 0xb0, 0x55, 0x22, 0xb5, 0x51, 0xbe, 0x3d, 0x78, 0x56, 0x43, 0x3e, 0x4f, 0xa4, 0x66, 0x86,
	0x40, 0x7c, 0xb0, 0x45, 0x38, 0x41, 0xba, 0x65, 0x88, 0xf7, 0x16, 0x53, 0x09, 0x27, 0xc8, 0x4c,
	0xc6, 0x7b, 0x03, 0x4e, 0xd6, 0x6c, 0x61, 0x8b, 0x46, 0x95, 0x2d, 0xac, 0x65, 0x5b, 0x78, 0x13,
	0xb0, 0xd3, 0x56, 0xe4, 0xf8, 0x8e, 0x9f, 0x76, 0x06, 0xfb, 0x45, 0x93, 0x34, 0x77, 0xca, 0x25,
	0x8e, 0x53, 0x87, 0xe4, 0xf5, 0x5e, 0x02, 0x8c, 0x25, 0x86, 0x1a, 0xa3, 0x20, 0xd4, 0xa6, 0x53,
	0x25, 0xc1, 0xcd, 0x81, 0x43, 0xdd, 0xfd, 0x56, 0xa1, 0xab, 0x22, 0x43, 0x78, 0xb8, 0xb2, 0xae,
	0x14, 0x6d, 0x18, 0x07, 0x1e, 0x94, 0x3b, 0x90, 0x3d, 0x10, 0xcb, 0x55, 0x06, 0x7f, 0x9a, 0xb0,
	0xbf, 0x8c, 0x39, 0xcf, 0xf6, 0x22, 0x19, 0xc1, 0xee, 0xda, 0x8e, 0x23, 0x4f, 0x8a, 0xba, 0x65,
	0xeb, 0xcf, 0xab, 0xe8, 0x4a, 0x3e, 0xc3, 0xee, 0xda, 0xb3, 0xbe, 0x2d, 0x55, 0xb6, 0x20, 0xbd,
	0x4d, 0x59, 0x45, 0xbe, 0xc0, 0x5e, 0x99, 0xd9, 0xc9, 0x51, 0xc1, 0xaa, 0x58, 0x06, 0x5e, 0x0d,
	0xc0, 0x54, 0x2e, 0x33, 0xfc, 0x6d, 0xe5, 0x8a, 0x97, 0xe3, 0xd5, 0x00, 0x14, 0xb9, 0x80, 0x47,
	0x25, 0x63, 0x24, 0x4f, 0x37, 0xdb, 0xd9, 0xdb, 0x9c, 0x57, 0xef, 0x9c, 0xaf, 0xf6, 0x24, 0x14,
	0xfc, 0xbb, 0x63, 0xfe, 0x4c, 0x27, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x81, 0xb3, 0xc9, 0x19,
	0xe8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipeDescriptorServiceClient is the client API for PipeDescriptorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipeDescriptorServiceClient interface {
	GetPipeDescriptor(ctx context.Context, in *GetPipeDescriptorReq, opts ...grpc.CallOption) (*PipeDescriptor, error)
	AddPipeDescriptor(ctx context.Context, in *AddPipeDescriptorReq, opts ...grpc.CallOption) (*AddPipeDescriptorRes, error)
	// unimplemented
	UpdatePipeDescriptor(ctx context.Context, in *UpdatePipeDescriptorReq, opts ...grpc.CallOption) (*UpdatePipeDescriptorRes, error)
	RemovePipeDescriptor(ctx context.Context, in *RemovePipeDescriptorReq, opts ...grpc.CallOption) (*RemovePipeDescriptorRes, error)
	ListPipeDescriptors(ctx context.Context, in *ListPipeDescriptorsReq, opts ...grpc.CallOption) (*ListPipeDescriptorsRes, error)
}

type pipeDescriptorServiceClient struct {
	cc *grpc.ClientConn
}

func NewPipeDescriptorServiceClient(cc *grpc.ClientConn) PipeDescriptorServiceClient {
	return &pipeDescriptorServiceClient{cc}
}

func (c *pipeDescriptorServiceClient) GetPipeDescriptor(ctx context.Context, in *GetPipeDescriptorReq, opts ...grpc.CallOption) (*PipeDescriptor, error) {
	out := new(PipeDescriptor)
	err := c.cc.Invoke(ctx, "/schema.PipeDescriptorService/GetPipeDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeDescriptorServiceClient) AddPipeDescriptor(ctx context.Context, in *AddPipeDescriptorReq, opts ...grpc.CallOption) (*AddPipeDescriptorRes, error) {
	out := new(AddPipeDescriptorRes)
	err := c.cc.Invoke(ctx, "/schema.PipeDescriptorService/AddPipeDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeDescriptorServiceClient) UpdatePipeDescriptor(ctx context.Context, in *UpdatePipeDescriptorReq, opts ...grpc.CallOption) (*UpdatePipeDescriptorRes, error) {
	out := new(UpdatePipeDescriptorRes)
	err := c.cc.Invoke(ctx, "/schema.PipeDescriptorService/UpdatePipeDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeDescriptorServiceClient) RemovePipeDescriptor(ctx context.Context, in *RemovePipeDescriptorReq, opts ...grpc.CallOption) (*RemovePipeDescriptorRes, error) {
	out := new(RemovePipeDescriptorRes)
	err := c.cc.Invoke(ctx, "/schema.PipeDescriptorService/RemovePipeDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeDescriptorServiceClient) ListPipeDescriptors(ctx context.Context, in *ListPipeDescriptorsReq, opts ...grpc.CallOption) (*ListPipeDescriptorsRes, error) {
	out := new(ListPipeDescriptorsRes)
	err := c.cc.Invoke(ctx, "/schema.PipeDescriptorService/ListPipeDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipeDescriptorServiceServer is the server API for PipeDescriptorService service.
type PipeDescriptorServiceServer interface {
	GetPipeDescriptor(context.Context, *GetPipeDescriptorReq) (*PipeDescriptor, error)
	AddPipeDescriptor(context.Context, *AddPipeDescriptorReq) (*AddPipeDescriptorRes, error)
	// unimplemented
	UpdatePipeDescriptor(context.Context, *UpdatePipeDescriptorReq) (*UpdatePipeDescriptorRes, error)
	RemovePipeDescriptor(context.Context, *RemovePipeDescriptorReq) (*RemovePipeDescriptorRes, error)
	ListPipeDescriptors(context.Context, *ListPipeDescriptorsReq) (*ListPipeDescriptorsRes, error)
}

// UnimplementedPipeDescriptorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPipeDescriptorServiceServer struct {
}

func (*UnimplementedPipeDescriptorServiceServer) GetPipeDescriptor(ctx context.Context, req *GetPipeDescriptorReq) (*PipeDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeDescriptor not implemented")
}
func (*UnimplementedPipeDescriptorServiceServer) AddPipeDescriptor(ctx context.Context, req *AddPipeDescriptorReq) (*AddPipeDescriptorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPipeDescriptor not implemented")
}
func (*UnimplementedPipeDescriptorServiceServer) UpdatePipeDescriptor(ctx context.Context, req *UpdatePipeDescriptorReq) (*UpdatePipeDescriptorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipeDescriptor not implemented")
}
func (*UnimplementedPipeDescriptorServiceServer) RemovePipeDescriptor(ctx context.Context, req *RemovePipeDescriptorReq) (*RemovePipeDescriptorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePipeDescriptor not implemented")
}
func (*UnimplementedPipeDescriptorServiceServer) ListPipeDescriptors(ctx context.Context, req *ListPipeDescriptorsReq) (*ListPipeDescriptorsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipeDescriptors not implemented")
}

func RegisterPipeDescriptorServiceServer(s *grpc.Server, srv PipeDescriptorServiceServer) {
	s.RegisterService(&_PipeDescriptorService_serviceDesc, srv)
}

func _PipeDescriptorService_GetPipeDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipeDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeDescriptorServiceServer).GetPipeDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.PipeDescriptorService/GetPipeDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeDescriptorServiceServer).GetPipeDescriptor(ctx, req.(*GetPipeDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipeDescriptorService_AddPipeDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPipeDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeDescriptorServiceServer).AddPipeDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.PipeDescriptorService/AddPipeDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeDescriptorServiceServer).AddPipeDescriptor(ctx, req.(*AddPipeDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipeDescriptorService_UpdatePipeDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipeDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeDescriptorServiceServer).UpdatePipeDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.PipeDescriptorService/UpdatePipeDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeDescriptorServiceServer).UpdatePipeDescriptor(ctx, req.(*UpdatePipeDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipeDescriptorService_RemovePipeDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePipeDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeDescriptorServiceServer).RemovePipeDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.PipeDescriptorService/RemovePipeDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeDescriptorServiceServer).RemovePipeDescriptor(ctx, req.(*RemovePipeDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipeDescriptorService_ListPipeDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipeDescriptorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeDescriptorServiceServer).ListPipeDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.PipeDescriptorService/ListPipeDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeDescriptorServiceServer).ListPipeDescriptors(ctx, req.(*ListPipeDescriptorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipeDescriptorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.PipeDescriptorService",
	HandlerType: (*PipeDescriptorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPipeDescriptor",
			Handler:    _PipeDescriptorService_GetPipeDescriptor_Handler,
		},
		{
			MethodName: "AddPipeDescriptor",
			Handler:    _PipeDescriptorService_AddPipeDescriptor_Handler,
		},
		{
			MethodName: "UpdatePipeDescriptor",
			Handler:    _PipeDescriptorService_UpdatePipeDescriptor_Handler,
		},
		{
			MethodName: "RemovePipeDescriptor",
			Handler:    _PipeDescriptorService_RemovePipeDescriptor_Handler,
		},
		{
			MethodName: "ListPipeDescriptors",
			Handler:    _PipeDescriptorService_ListPipeDescriptors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipe_descriptor_service.proto",
}
