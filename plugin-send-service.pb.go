// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin-send-service.proto

package gapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendMsgReq struct {
	Pipe                 *PipeExt          `protobuf:"bytes,1,opt,name=pipe,proto3" json:"pipe,omitempty"`
	InputID              string            `protobuf:"bytes,2,opt,name=inputID,proto3" json:"inputID,omitempty"`
	Message              map[string]*Value `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SendMsgReq) Reset()         { *m = SendMsgReq{} }
func (m *SendMsgReq) String() string { return proto.CompactTextString(m) }
func (*SendMsgReq) ProtoMessage()    {}
func (*SendMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db3606669735419f, []int{0}
}

func (m *SendMsgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMsgReq.Unmarshal(m, b)
}
func (m *SendMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMsgReq.Marshal(b, m, deterministic)
}
func (m *SendMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMsgReq.Merge(m, src)
}
func (m *SendMsgReq) XXX_Size() int {
	return xxx_messageInfo_SendMsgReq.Size(m)
}
func (m *SendMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendMsgReq proto.InternalMessageInfo

func (m *SendMsgReq) GetPipe() *PipeExt {
	if m != nil {
		return m.Pipe
	}
	return nil
}

func (m *SendMsgReq) GetInputID() string {
	if m != nil {
		return m.InputID
	}
	return ""
}

func (m *SendMsgReq) GetMessage() map[string]*Value {
	if m != nil {
		return m.Message
	}
	return nil
}

type SendMsgRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMsgRes) Reset()         { *m = SendMsgRes{} }
func (m *SendMsgRes) String() string { return proto.CompactTextString(m) }
func (*SendMsgRes) ProtoMessage()    {}
func (*SendMsgRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db3606669735419f, []int{1}
}

func (m *SendMsgRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMsgRes.Unmarshal(m, b)
}
func (m *SendMsgRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMsgRes.Marshal(b, m, deterministic)
}
func (m *SendMsgRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMsgRes.Merge(m, src)
}
func (m *SendMsgRes) XXX_Size() int {
	return xxx_messageInfo_SendMsgRes.Size(m)
}
func (m *SendMsgRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMsgRes.DiscardUnknown(m)
}

var xxx_messageInfo_SendMsgRes proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SendMsgReq)(nil), "schema.SendMsgReq")
	proto.RegisterMapType((map[string]*Value)(nil), "schema.SendMsgReq.MessageEntry")
	proto.RegisterType((*SendMsgRes)(nil), "schema.SendMsgRes")
}

func init() { proto.RegisterFile("plugin-send-service.proto", fileDescriptor_db3606669735419f) }

var fileDescriptor_db3606669735419f = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x50, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x95, 0x9b, 0x92, 0xa8, 0x97, 0x56, 0xc0, 0x4d, 0x21, 0x0b, 0x51, 0xbb, 0x64, 0x69, 0x24,
	0xc2, 0x42, 0x19, 0x11, 0x1d, 0x3a, 0x54, 0xaa, 0x5c, 0x89, 0x81, 0x2d, 0xb4, 0xa7, 0x60, 0xd1,
	0xb8, 0x26, 0x76, 0x2a, 0x3a, 0xf2, 0x89, 0xfc, 0x11, 0x8a, 0x93, 0x88, 0x4a, 0x9d, 0xd8, 0x7c,
	0xef, 0xbd, 0x7b, 0xf7, 0xfc, 0xe0, 0x46, 0xed, 0xaa, 0x5c, 0xc8, 0xa9, 0x26, 0xb9, 0x9d, 0x6a,
	0x2a, 0x0f, 0x62, 0x43, 0x89, 0x2a, 0xf7, 0x66, 0x8f, 0xae, 0xde, 0xbc, 0x53, 0x91, 0x85, 0xa0,
	0x84, 0x6a, 0xb1, 0xd0, 0x3f, 0x64, 0xbb, 0xaa, 0x1d, 0xc6, 0x3f, 0x0c, 0x60, 0x4d, 0x72, 0xbb,
	0xd4, 0x39, 0xa7, 0x4f, 0x9c, 0x40, 0xbf, 0x56, 0x06, 0x2c, 0x62, 0xb1, 0x9f, 0x5e, 0x26, 0xcd,
	0x7a, 0xb2, 0x12, 0x8a, 0xe6, 0x5f, 0x86, 0x5b, 0x12, 0x03, 0xf0, 0x84, 0x54, 0x95, 0x59, 0x3c,
	0x07, 0xbd, 0x88, 0xc5, 0x03, 0xde, 0x8d, 0x38, 0x03, 0xaf, 0x20, 0xad, 0xb3, 0x9c, 0x02, 0x27,
	0x72, 0x62, 0x3f, 0xbd, 0xed, 0x1c, 0xfe, 0x6e, 0x24, 0xcb, 0x46, 0x31, 0x97, 0xa6, 0x3c, 0xf2,
	0x4e, 0x1f, 0x2e, 0x60, 0x78, 0x4a, 0xe0, 0x15, 0x38, 0x1f, 0x74, 0xb4, 0x41, 0x06, 0xbc, 0x7e,
	0xe2, 0x04, 0x2e, 0x6c, 0x72, 0x7b, 0xd4, 0x4f, 0x47, 0x9d, 0xf5, 0x4b, 0x0d, 0xf2, 0x86, 0x7b,
	0xec, 0x3d, 0xb0, 0xf1, 0xf0, 0xe4, 0x4b, 0x3a, 0xfd, 0x66, 0x70, 0xbd, 0xb2, 0x05, 0xd5, 0xe0,
	0xba, 0xa9, 0x07, 0xef, 0xc0, 0x6b, 0x35, 0x88, 0xe7, 0x19, 0xc3, 0x73, 0x4c, 0xe3, 0x0c, 0x46,
	0xd6, 0xc1, 0x94, 0x94, 0x15, 0xff, 0x58, 0x8c, 0xd9, 0x93, 0xfb, 0xda, 0xcf, 0x33, 0x25, 0xde,
	0x5c, 0x5b, 0xfa, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x56, 0xba, 0x4a, 0xb2, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PluginSendServiceClient is the client API for PluginSendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginSendServiceClient interface {
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgRes, error)
	SendStreamMsg(ctx context.Context, opts ...grpc.CallOption) (PluginSendService_SendStreamMsgClient, error)
}

type pluginSendServiceClient struct {
	cc *grpc.ClientConn
}

func NewPluginSendServiceClient(cc *grpc.ClientConn) PluginSendServiceClient {
	return &pluginSendServiceClient{cc}
}

func (c *pluginSendServiceClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgRes, error) {
	out := new(SendMsgRes)
	err := c.cc.Invoke(ctx, "/schema.PluginSendService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginSendServiceClient) SendStreamMsg(ctx context.Context, opts ...grpc.CallOption) (PluginSendService_SendStreamMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PluginSendService_serviceDesc.Streams[0], "/schema.PluginSendService/SendStreamMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginSendServiceSendStreamMsgClient{stream}
	return x, nil
}

type PluginSendService_SendStreamMsgClient interface {
	Send(*SendMsgReq) error
	CloseAndRecv() (*SendMsgRes, error)
	grpc.ClientStream
}

type pluginSendServiceSendStreamMsgClient struct {
	grpc.ClientStream
}

func (x *pluginSendServiceSendStreamMsgClient) Send(m *SendMsgReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pluginSendServiceSendStreamMsgClient) CloseAndRecv() (*SendMsgRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendMsgRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginSendServiceServer is the server API for PluginSendService service.
type PluginSendServiceServer interface {
	SendMsg(context.Context, *SendMsgReq) (*SendMsgRes, error)
	SendStreamMsg(PluginSendService_SendStreamMsgServer) error
}

// UnimplementedPluginSendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPluginSendServiceServer struct {
}

func (*UnimplementedPluginSendServiceServer) SendMsg(ctx context.Context, req *SendMsgReq) (*SendMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (*UnimplementedPluginSendServiceServer) SendStreamMsg(srv PluginSendService_SendStreamMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStreamMsg not implemented")
}

func RegisterPluginSendServiceServer(s *grpc.Server, srv PluginSendServiceServer) {
	s.RegisterService(&_PluginSendService_serviceDesc, srv)
}

func _PluginSendService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginSendServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.PluginSendService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginSendServiceServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginSendService_SendStreamMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PluginSendServiceServer).SendStreamMsg(&pluginSendServiceSendStreamMsgServer{stream})
}

type PluginSendService_SendStreamMsgServer interface {
	SendAndClose(*SendMsgRes) error
	Recv() (*SendMsgReq, error)
	grpc.ServerStream
}

type pluginSendServiceSendStreamMsgServer struct {
	grpc.ServerStream
}

func (x *pluginSendServiceSendStreamMsgServer) SendAndClose(m *SendMsgRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pluginSendServiceSendStreamMsgServer) Recv() (*SendMsgReq, error) {
	m := new(SendMsgReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PluginSendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.PluginSendService",
	HandlerType: (*PluginSendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _PluginSendService_SendMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStreamMsg",
			Handler:       _PluginSendService_SendStreamMsg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "plugin-send-service.proto",
}
