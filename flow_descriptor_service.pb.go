// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flow_descriptor_service.proto

package gapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetFlowDescriptorReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFlowDescriptorReq) Reset()         { *m = GetFlowDescriptorReq{} }
func (m *GetFlowDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*GetFlowDescriptorReq) ProtoMessage()    {}
func (*GetFlowDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{0}
}

func (m *GetFlowDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFlowDescriptorReq.Unmarshal(m, b)
}
func (m *GetFlowDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFlowDescriptorReq.Marshal(b, m, deterministic)
}
func (m *GetFlowDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlowDescriptorReq.Merge(m, src)
}
func (m *GetFlowDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_GetFlowDescriptorReq.Size(m)
}
func (m *GetFlowDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlowDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlowDescriptorReq proto.InternalMessageInfo

func (m *GetFlowDescriptorReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AddFlowDescriptorReq struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Variables            []*FlowVariableDescriptor `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
	Pipes                []*Pipe                   `protobuf:"bytes,3,rep,name=pipes,proto3" json:"pipes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AddFlowDescriptorReq) Reset()         { *m = AddFlowDescriptorReq{} }
func (m *AddFlowDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*AddFlowDescriptorReq) ProtoMessage()    {}
func (*AddFlowDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{1}
}

func (m *AddFlowDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddFlowDescriptorReq.Unmarshal(m, b)
}
func (m *AddFlowDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddFlowDescriptorReq.Marshal(b, m, deterministic)
}
func (m *AddFlowDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFlowDescriptorReq.Merge(m, src)
}
func (m *AddFlowDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_AddFlowDescriptorReq.Size(m)
}
func (m *AddFlowDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFlowDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddFlowDescriptorReq proto.InternalMessageInfo

func (m *AddFlowDescriptorReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddFlowDescriptorReq) GetVariables() []*FlowVariableDescriptor {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *AddFlowDescriptorReq) GetPipes() []*Pipe {
	if m != nil {
		return m.Pipes
	}
	return nil
}

type AddFlowDescriptorRes struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFlowDescriptorRes) Reset()         { *m = AddFlowDescriptorRes{} }
func (m *AddFlowDescriptorRes) String() string { return proto.CompactTextString(m) }
func (*AddFlowDescriptorRes) ProtoMessage()    {}
func (*AddFlowDescriptorRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{2}
}

func (m *AddFlowDescriptorRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddFlowDescriptorRes.Unmarshal(m, b)
}
func (m *AddFlowDescriptorRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddFlowDescriptorRes.Marshal(b, m, deterministic)
}
func (m *AddFlowDescriptorRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFlowDescriptorRes.Merge(m, src)
}
func (m *AddFlowDescriptorRes) XXX_Size() int {
	return xxx_messageInfo_AddFlowDescriptorRes.Size(m)
}
func (m *AddFlowDescriptorRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFlowDescriptorRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddFlowDescriptorRes proto.InternalMessageInfo

func (m *AddFlowDescriptorRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddFlowDescriptorRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateFlowDescriptorReq struct {
	Id                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Variables            []*FlowVariableDescriptor `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty"`
	Pipes                []*Pipe                   `protobuf:"bytes,4,rep,name=pipes,proto3" json:"pipes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateFlowDescriptorReq) Reset()         { *m = UpdateFlowDescriptorReq{} }
func (m *UpdateFlowDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*UpdateFlowDescriptorReq) ProtoMessage()    {}
func (*UpdateFlowDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{3}
}

func (m *UpdateFlowDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateFlowDescriptorReq.Unmarshal(m, b)
}
func (m *UpdateFlowDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateFlowDescriptorReq.Marshal(b, m, deterministic)
}
func (m *UpdateFlowDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFlowDescriptorReq.Merge(m, src)
}
func (m *UpdateFlowDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_UpdateFlowDescriptorReq.Size(m)
}
func (m *UpdateFlowDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFlowDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFlowDescriptorReq proto.InternalMessageInfo

func (m *UpdateFlowDescriptorReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateFlowDescriptorReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateFlowDescriptorReq) GetVariables() []*FlowVariableDescriptor {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *UpdateFlowDescriptorReq) GetPipes() []*Pipe {
	if m != nil {
		return m.Pipes
	}
	return nil
}

type UpdateFlowDescriptorRes struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFlowDescriptorRes) Reset()         { *m = UpdateFlowDescriptorRes{} }
func (m *UpdateFlowDescriptorRes) String() string { return proto.CompactTextString(m) }
func (*UpdateFlowDescriptorRes) ProtoMessage()    {}
func (*UpdateFlowDescriptorRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{4}
}

func (m *UpdateFlowDescriptorRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateFlowDescriptorRes.Unmarshal(m, b)
}
func (m *UpdateFlowDescriptorRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateFlowDescriptorRes.Marshal(b, m, deterministic)
}
func (m *UpdateFlowDescriptorRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFlowDescriptorRes.Merge(m, src)
}
func (m *UpdateFlowDescriptorRes) XXX_Size() int {
	return xxx_messageInfo_UpdateFlowDescriptorRes.Size(m)
}
func (m *UpdateFlowDescriptorRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFlowDescriptorRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFlowDescriptorRes proto.InternalMessageInfo

func (m *UpdateFlowDescriptorRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type RemoveFlowDescriptorReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFlowDescriptorReq) Reset()         { *m = RemoveFlowDescriptorReq{} }
func (m *RemoveFlowDescriptorReq) String() string { return proto.CompactTextString(m) }
func (*RemoveFlowDescriptorReq) ProtoMessage()    {}
func (*RemoveFlowDescriptorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{5}
}

func (m *RemoveFlowDescriptorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveFlowDescriptorReq.Unmarshal(m, b)
}
func (m *RemoveFlowDescriptorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveFlowDescriptorReq.Marshal(b, m, deterministic)
}
func (m *RemoveFlowDescriptorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFlowDescriptorReq.Merge(m, src)
}
func (m *RemoveFlowDescriptorReq) XXX_Size() int {
	return xxx_messageInfo_RemoveFlowDescriptorReq.Size(m)
}
func (m *RemoveFlowDescriptorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFlowDescriptorReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFlowDescriptorReq proto.InternalMessageInfo

func (m *RemoveFlowDescriptorReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RemoveFlowDescriptorRes struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFlowDescriptorRes) Reset()         { *m = RemoveFlowDescriptorRes{} }
func (m *RemoveFlowDescriptorRes) String() string { return proto.CompactTextString(m) }
func (*RemoveFlowDescriptorRes) ProtoMessage()    {}
func (*RemoveFlowDescriptorRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{6}
}

func (m *RemoveFlowDescriptorRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveFlowDescriptorRes.Unmarshal(m, b)
}
func (m *RemoveFlowDescriptorRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveFlowDescriptorRes.Marshal(b, m, deterministic)
}
func (m *RemoveFlowDescriptorRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFlowDescriptorRes.Merge(m, src)
}
func (m *RemoveFlowDescriptorRes) XXX_Size() int {
	return xxx_messageInfo_RemoveFlowDescriptorRes.Size(m)
}
func (m *RemoveFlowDescriptorRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFlowDescriptorRes.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFlowDescriptorRes proto.InternalMessageInfo

func (m *RemoveFlowDescriptorRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ListFlowDescriptorsReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Sort                 *Sort    `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Page                 *Page    `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFlowDescriptorsReq) Reset()         { *m = ListFlowDescriptorsReq{} }
func (m *ListFlowDescriptorsReq) String() string { return proto.CompactTextString(m) }
func (*ListFlowDescriptorsReq) ProtoMessage()    {}
func (*ListFlowDescriptorsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{7}
}

func (m *ListFlowDescriptorsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFlowDescriptorsReq.Unmarshal(m, b)
}
func (m *ListFlowDescriptorsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFlowDescriptorsReq.Marshal(b, m, deterministic)
}
func (m *ListFlowDescriptorsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFlowDescriptorsReq.Merge(m, src)
}
func (m *ListFlowDescriptorsReq) XXX_Size() int {
	return xxx_messageInfo_ListFlowDescriptorsReq.Size(m)
}
func (m *ListFlowDescriptorsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFlowDescriptorsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListFlowDescriptorsReq proto.InternalMessageInfo

func (m *ListFlowDescriptorsReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListFlowDescriptorsReq) GetSort() *Sort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *ListFlowDescriptorsReq) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type ListFlowDescriptorsRes struct {
	FlowDescriptors      []*FlowDescriptor `protobuf:"bytes,1,rep,name=flow_descriptors,json=flowDescriptors,proto3" json:"flow_descriptors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListFlowDescriptorsRes) Reset()         { *m = ListFlowDescriptorsRes{} }
func (m *ListFlowDescriptorsRes) String() string { return proto.CompactTextString(m) }
func (*ListFlowDescriptorsRes) ProtoMessage()    {}
func (*ListFlowDescriptorsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c86af894f3d8385, []int{8}
}

func (m *ListFlowDescriptorsRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFlowDescriptorsRes.Unmarshal(m, b)
}
func (m *ListFlowDescriptorsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFlowDescriptorsRes.Marshal(b, m, deterministic)
}
func (m *ListFlowDescriptorsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFlowDescriptorsRes.Merge(m, src)
}
func (m *ListFlowDescriptorsRes) XXX_Size() int {
	return xxx_messageInfo_ListFlowDescriptorsRes.Size(m)
}
func (m *ListFlowDescriptorsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFlowDescriptorsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListFlowDescriptorsRes proto.InternalMessageInfo

func (m *ListFlowDescriptorsRes) GetFlowDescriptors() []*FlowDescriptor {
	if m != nil {
		return m.FlowDescriptors
	}
	return nil
}

func init() {
	proto.RegisterType((*GetFlowDescriptorReq)(nil), "schema.GetFlowDescriptorReq")
	proto.RegisterType((*AddFlowDescriptorReq)(nil), "schema.AddFlowDescriptorReq")
	proto.RegisterType((*AddFlowDescriptorRes)(nil), "schema.AddFlowDescriptorRes")
	proto.RegisterType((*UpdateFlowDescriptorReq)(nil), "schema.UpdateFlowDescriptorReq")
	proto.RegisterType((*UpdateFlowDescriptorRes)(nil), "schema.UpdateFlowDescriptorRes")
	proto.RegisterType((*RemoveFlowDescriptorReq)(nil), "schema.RemoveFlowDescriptorReq")
	proto.RegisterType((*RemoveFlowDescriptorRes)(nil), "schema.RemoveFlowDescriptorRes")
	proto.RegisterType((*ListFlowDescriptorsReq)(nil), "schema.ListFlowDescriptorsReq")
	proto.RegisterType((*ListFlowDescriptorsRes)(nil), "schema.ListFlowDescriptorsRes")
}

func init() { proto.RegisterFile("flow_descriptor_service.proto", fileDescriptor_2c86af894f3d8385) }

var fileDescriptor_2c86af894f3d8385 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x55, 0x1e, 0x0d, 0xf4, 0xf2, 0xac, 0x99, 0xb6, 0x51, 0xc4, 0x23, 0xca, 0x02, 0x95, 0xcd,
	0x2c, 0x8a, 0xc4, 0x8a, 0x4d, 0x11, 0x02, 0x55, 0x42, 0xa2, 0x4a, 0x55, 0x84, 0x60, 0x31, 0x72,
	0x27, 0xb7, 0x53, 0xab, 0x19, 0x6c, 0x7c, 0xd3, 0xe9, 0x4f, 0xf0, 0x0f, 0xfc, 0x09, 0xdf, 0x86,
	0xe2, 0x64, 0x32, 0x99, 0x49, 0xdc, 0x48, 0xdd, 0xc5, 0x3e, 0xe7, 0x1e, 0xdf, 0xe3, 0x9c, 0x6b,
	0x78, 0x71, 0x91, 0xcb, 0x9b, 0x49, 0x86, 0x34, 0xd5, 0x42, 0x15, 0x52, 0x4f, 0x08, 0xf5, 0x42,
	0x4c, 0x71, 0xac, 0xb4, 0x2c, 0x24, 0x0b, 0x68, 0x7a, 0x89, 0x73, 0x1e, 0x81, 0x12, 0xaa, 0xde,
	0x8b, 0x76, 0x37, 0x4a, 0xea, 0xed, 0x47, 0x97, 0x98, 0x2b, 0xd4, 0x54, 0x2d, 0x93, 0xd7, 0x30,
	0xfa, 0x8c, 0xc5, 0xa7, 0x5c, 0xde, 0x7c, 0x6c, 0x98, 0x29, 0xfe, 0x66, 0x8f, 0xc1, 0x15, 0x59,
	0xe8, 0xc4, 0xce, 0xc1, 0x76, 0xea, 0x8a, 0x2c, 0xf9, 0xe3, 0xc0, 0xe8, 0x28, 0xcb, 0xba, 0x44,
	0x06, 0xfe, 0x2f, 0x3e, 0xc7, 0x9a, 0x6a, 0xbe, 0xd9, 0x7b, 0xd8, 0x5e, 0x70, 0x2d, 0xf8, 0x79,
	0x8e, 0x14, 0xba, 0xb1, 0x77, 0xf0, 0xe0, 0xf0, 0xe5, 0xb8, 0x6a, 0x71, 0x5c, 0x2a, 0x7c, 0xab,
	0xc1, 0x96, 0xd2, 0xaa, 0x80, 0x25, 0xb0, 0x55, 0xda, 0xa0, 0xd0, 0x33, 0x95, 0x0f, 0x97, 0x95,
	0x27, 0x42, 0x61, 0x5a, 0x41, 0xc9, 0xbb, 0xde, 0x6e, 0xa8, 0x6c, 0x5b, 0x5e, 0x99, 0x5e, 0xee,
	0xa7, 0xae, 0xbc, 0xaa, 0x6d, 0xb8, 0x8d, 0x8d, 0xbf, 0x0e, 0xec, 0x9f, 0xa9, 0x8c, 0x17, 0x38,
	0x68, 0xb9, 0x71, 0xe6, 0xda, 0x9c, 0x79, 0x77, 0x76, 0xe6, 0xdb, 0x9d, 0xbd, 0xb1, 0x35, 0xd8,
	0x31, 0x57, 0x52, 0x53, 0x9c, 0xcb, 0xc5, 0xb0, 0x17, 0x3b, 0xb5, 0xab, 0x7a, 0x0d, 0x7b, 0x5f,
	0x04, 0x6d, 0x44, 0x82, 0x4a, 0xd1, 0x7d, 0xb8, 0x77, 0x4d, 0xa8, 0x27, 0x8d, 0x72, 0x50, 0x2e,
	0x8f, 0x33, 0x16, 0x83, 0x4f, 0x52, 0x17, 0xa1, 0x1f, 0x3b, 0x6d, 0x5b, 0xa7, 0x52, 0x17, 0xa9,
	0x41, 0x4a, 0x86, 0xe2, 0x33, 0x0c, 0xb7, 0xd6, 0x19, 0x27, 0x7c, 0x86, 0xa9, 0x41, 0x92, 0x9f,
	0x96, 0x63, 0x89, 0x1d, 0xc1, 0xd3, 0x8d, 0x28, 0x53, 0xe8, 0x98, 0x0b, 0xdc, 0x6b, 0x5f, 0x7d,
	0xcb, 0xd5, 0x93, 0x8b, 0x75, 0x95, 0xc3, 0x7f, 0x1e, 0xec, 0xae, 0x73, 0x4e, 0xab, 0xf9, 0x61,
	0xc7, 0xb0, 0xd3, 0xc9, 0x3f, 0x7b, 0xbe, 0xd4, 0xed, 0x1b, 0x8d, 0xc8, 0x72, 0x2a, 0xfb, 0x0a,
	0x3b, 0x9d, 0x4c, 0xae, 0xa4, 0xfa, 0x86, 0x27, 0xba, 0x0d, 0x25, 0xf6, 0x1d, 0x46, 0x7d, 0x51,
	0x60, 0xaf, 0x96, 0x55, 0x96, 0x24, 0x47, 0x03, 0x04, 0xa3, 0xdc, 0x17, 0x87, 0x95, 0xb2, 0x25,
	0x57, 0xd1, 0x00, 0x81, 0xd8, 0x19, 0x3c, 0xeb, 0xf9, 0x8d, 0xac, 0x19, 0x92, 0xfe, 0x68, 0x45,
	0xb7, 0xe3, 0xf4, 0x21, 0xf8, 0xe1, 0xcf, 0xb8, 0x12, 0xe7, 0x81, 0x79, 0xb5, 0xde, 0xfe, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xa1, 0xe2, 0xdd, 0x6f, 0x10, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlowDescriptorServiceClient is the client API for FlowDescriptorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlowDescriptorServiceClient interface {
	GetFlowDescriptor(ctx context.Context, in *GetFlowDescriptorReq, opts ...grpc.CallOption) (*FlowDescriptor, error)
	AddFlowDescriptor(ctx context.Context, in *AddFlowDescriptorReq, opts ...grpc.CallOption) (*AddFlowDescriptorRes, error)
	UpdateFlowDescriptor(ctx context.Context, in *UpdateFlowDescriptorReq, opts ...grpc.CallOption) (*UpdateFlowDescriptorRes, error)
	RemoveFlowDescriptor(ctx context.Context, in *RemoveFlowDescriptorReq, opts ...grpc.CallOption) (*RemoveFlowDescriptorRes, error)
	// unimplemented
	ListFlowDescriptors(ctx context.Context, in *ListFlowDescriptorsReq, opts ...grpc.CallOption) (*ListFlowDescriptorsRes, error)
}

type flowDescriptorServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlowDescriptorServiceClient(cc *grpc.ClientConn) FlowDescriptorServiceClient {
	return &flowDescriptorServiceClient{cc}
}

func (c *flowDescriptorServiceClient) GetFlowDescriptor(ctx context.Context, in *GetFlowDescriptorReq, opts ...grpc.CallOption) (*FlowDescriptor, error) {
	out := new(FlowDescriptor)
	err := c.cc.Invoke(ctx, "/schema.FlowDescriptorService/GetFlowDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowDescriptorServiceClient) AddFlowDescriptor(ctx context.Context, in *AddFlowDescriptorReq, opts ...grpc.CallOption) (*AddFlowDescriptorRes, error) {
	out := new(AddFlowDescriptorRes)
	err := c.cc.Invoke(ctx, "/schema.FlowDescriptorService/AddFlowDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowDescriptorServiceClient) UpdateFlowDescriptor(ctx context.Context, in *UpdateFlowDescriptorReq, opts ...grpc.CallOption) (*UpdateFlowDescriptorRes, error) {
	out := new(UpdateFlowDescriptorRes)
	err := c.cc.Invoke(ctx, "/schema.FlowDescriptorService/UpdateFlowDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowDescriptorServiceClient) RemoveFlowDescriptor(ctx context.Context, in *RemoveFlowDescriptorReq, opts ...grpc.CallOption) (*RemoveFlowDescriptorRes, error) {
	out := new(RemoveFlowDescriptorRes)
	err := c.cc.Invoke(ctx, "/schema.FlowDescriptorService/RemoveFlowDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowDescriptorServiceClient) ListFlowDescriptors(ctx context.Context, in *ListFlowDescriptorsReq, opts ...grpc.CallOption) (*ListFlowDescriptorsRes, error) {
	out := new(ListFlowDescriptorsRes)
	err := c.cc.Invoke(ctx, "/schema.FlowDescriptorService/ListFlowDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowDescriptorServiceServer is the server API for FlowDescriptorService service.
type FlowDescriptorServiceServer interface {
	GetFlowDescriptor(context.Context, *GetFlowDescriptorReq) (*FlowDescriptor, error)
	AddFlowDescriptor(context.Context, *AddFlowDescriptorReq) (*AddFlowDescriptorRes, error)
	UpdateFlowDescriptor(context.Context, *UpdateFlowDescriptorReq) (*UpdateFlowDescriptorRes, error)
	RemoveFlowDescriptor(context.Context, *RemoveFlowDescriptorReq) (*RemoveFlowDescriptorRes, error)
	// unimplemented
	ListFlowDescriptors(context.Context, *ListFlowDescriptorsReq) (*ListFlowDescriptorsRes, error)
}

// UnimplementedFlowDescriptorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFlowDescriptorServiceServer struct {
}

func (*UnimplementedFlowDescriptorServiceServer) GetFlowDescriptor(ctx context.Context, req *GetFlowDescriptorReq) (*FlowDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowDescriptor not implemented")
}
func (*UnimplementedFlowDescriptorServiceServer) AddFlowDescriptor(ctx context.Context, req *AddFlowDescriptorReq) (*AddFlowDescriptorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlowDescriptor not implemented")
}
func (*UnimplementedFlowDescriptorServiceServer) UpdateFlowDescriptor(ctx context.Context, req *UpdateFlowDescriptorReq) (*UpdateFlowDescriptorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowDescriptor not implemented")
}
func (*UnimplementedFlowDescriptorServiceServer) RemoveFlowDescriptor(ctx context.Context, req *RemoveFlowDescriptorReq) (*RemoveFlowDescriptorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFlowDescriptor not implemented")
}
func (*UnimplementedFlowDescriptorServiceServer) ListFlowDescriptors(ctx context.Context, req *ListFlowDescriptorsReq) (*ListFlowDescriptorsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlowDescriptors not implemented")
}

func RegisterFlowDescriptorServiceServer(s *grpc.Server, srv FlowDescriptorServiceServer) {
	s.RegisterService(&_FlowDescriptorService_serviceDesc, srv)
}

func _FlowDescriptorService_GetFlowDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowDescriptorServiceServer).GetFlowDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.FlowDescriptorService/GetFlowDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowDescriptorServiceServer).GetFlowDescriptor(ctx, req.(*GetFlowDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowDescriptorService_AddFlowDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlowDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowDescriptorServiceServer).AddFlowDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.FlowDescriptorService/AddFlowDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowDescriptorServiceServer).AddFlowDescriptor(ctx, req.(*AddFlowDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowDescriptorService_UpdateFlowDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowDescriptorServiceServer).UpdateFlowDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.FlowDescriptorService/UpdateFlowDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowDescriptorServiceServer).UpdateFlowDescriptor(ctx, req.(*UpdateFlowDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowDescriptorService_RemoveFlowDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFlowDescriptorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowDescriptorServiceServer).RemoveFlowDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.FlowDescriptorService/RemoveFlowDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowDescriptorServiceServer).RemoveFlowDescriptor(ctx, req.(*RemoveFlowDescriptorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowDescriptorService_ListFlowDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowDescriptorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowDescriptorServiceServer).ListFlowDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.FlowDescriptorService/ListFlowDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowDescriptorServiceServer).ListFlowDescriptors(ctx, req.(*ListFlowDescriptorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlowDescriptorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.FlowDescriptorService",
	HandlerType: (*FlowDescriptorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlowDescriptor",
			Handler:    _FlowDescriptorService_GetFlowDescriptor_Handler,
		},
		{
			MethodName: "AddFlowDescriptor",
			Handler:    _FlowDescriptorService_AddFlowDescriptor_Handler,
		},
		{
			MethodName: "UpdateFlowDescriptor",
			Handler:    _FlowDescriptorService_UpdateFlowDescriptor_Handler,
		},
		{
			MethodName: "RemoveFlowDescriptor",
			Handler:    _FlowDescriptorService_RemoveFlowDescriptor_Handler,
		},
		{
			MethodName: "ListFlowDescriptors",
			Handler:    _FlowDescriptorService_ListFlowDescriptors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flow_descriptor_service.proto",
}
